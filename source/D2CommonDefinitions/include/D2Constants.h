#pragma once

enum D2GameTypeMode
{
	//	MODE_SINGLE = 0,
	MODE_CLOSED = 1,
	MODE_TCP,
	MODE_OPEN,
};

enum D2GameResolutionMode {
	D2GAMERES_640x480,
	D2GAMERES_800x600,
	NUM_GAME_RESOLUTIONS
};

enum D2C_SaveMagicHeaders
{
	D2SMAGIC_HEADER = 0xAA55AA55,
	D2SMAGIC_QUESTINFO = 0x576F6F21,
	D2SMAGIC_WPINFO = 0x5753,
	D2SMAGIC_NPCINFO = 0x7701,
	D2SMAGIC_MAINSTATINFO = 0x6766,
	D2SMAGIC_SKILLINFO = 0x6866,
	D2SMAGIC_ITEMLIST = 0x4A4D,
	D2SMAGIC_MERCINFO = 0x6A66,
	D2SMAGIC_IRONGOLEM = 0x6B66
};

enum D2InteractStates
{
	INTERACT_NONE = 0,
	INTERACT_TALKING = 1,   //the menu is open
	INTERACT_TRADE = 2,   //your trading
};

enum D2WeaponClasses
{
	WEAPONCLASS_NONE,
	WEAPONCLASS_BOW,
	WEAPONCLASS_1HS,
	WEAPONCLASS_1HT,
	WEAPONCLASS_STF,
	WEAPONCLASS_2HS,
	WEAPONCLASS_2HT,
	WEAPONCLASS_XBW,
	WEAPONCLASS_1JS,
	WEAPONCLASS_1JT,
	WEAPONCLASS_1SS,
	WEAPONCLASS_1ST,
	WEAPONCLASS_HT1,
	WEAPONCLASS_HT2
};

enum D2Composits
{
	COMPOSIT_HEAD,
	COMPOSIT_TORSO,
	COMPOSIT_LEGS,
	COMPOSIT_RIGHTARM,
	COMPOSIT_LEFTARM,
	COMPOSIT_RIGHTHAND,
	COMPOSIT_LEFTHAND,
	COMPOSIT_SHIELD,
	COMPOSIT_SPECIAL1,
	COMPOSIT_SPECIAL2,
	COMPOSIT_SPECIAL3,
	COMPOSIT_SPECIAL4,
	COMPOSIT_SPECIAL5,
	COMPOSIT_SPECIAL6,
	COMPOSIT_SPECIAL7,
	COMPOSIT_SPECIAL8,
	NUM_COMPONENTS,
};

#ifndef CONSTANTS_LEVELS //Pseudo-Macro to group all constants


enum D2C_WarpTileTypes
{
	WARPTILE_TOWNENTRY = 0x00, 		//Town Entry & Non-Town Waypoint (0)
	WARPTILE_TOWNENTRY2 = 0x05, 		//Town Entry 2 (5)
	WARPTILE_CORPSELOC = 0x0A, 		//Corpse Location (10)
	WARPTILE_MAPENTRY = 0x0B, 		//Map Entry & Portal Location (11)
	WARPTILE_TPLOC = 0x0C, 			//Town Portal Location (12)
	WARPTILE_TOWNWP = 0x0D			//Town Waypoint (13)
};

enum D2C_TownLevels
{
	D2TOWN_ROGUECAMP = 1,
	D2TOWN_LUTGHOL = 40,
	D2TOWN_KURAST = 75,
	D2TOWN_PANDFORT = 103,
	D2TOWN_HARRO = 109,
	D2TOWN_NULL = 0
};

enum D2C_Difficulties
{
	DIFFMODE_NORMAL,
	DIFFMODE_NIGHTMARE,
	DIFFMODE_HELL,
	NUM_DIFFICULTIES
};

enum D2C_Acts
{
	ACT_I,
	ACT_II,
	ACT_III,
	ACT_IV,
	ACT_V,
	NUM_ACTS
};

enum D2C_DrlgTypes
{
	DRLGTYPE_MAZE = 0x01,
	DRLGTYPE_PRESET = 0x02,
	DRLGTYPE_OUTDOOR = 0x03,
	NUM_DRLGTYPES
};



enum D2C_CollisionFlags
{
	//COLLIDE_NONE = 0x0000,
	//COLLIDE_BLOCK_PLAYER = 0x0001,
	//COLLIDE_BLOCK_MISSILE = 0x0002,
	//COLLIDE_WALLS = 0x0004,
	//COLLIDE_BLOCK_LEAP = 0x0008,
	//COLLIDE_ALTERNATE_FLOOR = 0x0010,
	//COLLIDE_BLANK = 0x0020,
	//COLLIDE_MISSILES = 0x0040,
	//COLLIDE_PLAYERS = 0x0080,
	//COLLIDE_MONSTERS = 0x0100,
	//COLLIDE_ITEMS = 0x0200,
	//COLLIDE_OBJECTS = 0x0400,
	//COLLIDE_DOORS = 0x0800,
	//COLLIDE_UNIT_RELATED = 0x1000,
	//COLLIDE_PETS = 0x2000,
	//COLLIDE_CORPSES = 0x4000,
	COLLIDE_NONE = 0x0000,
	COLLIDE_BLOCK_PLAYER = 0x0001,			// 'black space' in arcane sanctuary, cliff walls etc
	COLLIDE_BLOCK_MISSILE = 0x0002,			// tile based obstacles you can't shoot over
	COLLIDE_WALL = 0x0004,					// again used inconsistantly -.-
	COLLIDE_BLOCK_LEAP = 0x0008,
	COLLIDE_ALTERNATE_FLOOR = 0x0010,		// some floors have this set, others don't
	COLLIDE_BLANK = 0x0020,					// returned if the subtile is invalid
	COLLIDE_MISSILE = 0x0040,
	COLLIDE_PLAYER = 0x0080,
	COLLIDE_MONSTER = 0x0100,
	COLLIDE_ITEM = 0x0200,
	COLLIDE_OBJECT = 0x0400,
	COLLIDE_DOOR = 0x0800,
	COLLIDE_UNIT_RELATED = 0x1000,			// set for units sometimes, but not always
	COLLIDE_PET = 0x2000,
	COLLIDE_4000 = 0x4000,
	COLLIDE_CORPSE = 0x8000,				// also used by portals, but dead monsters are mask 0x8000
};

enum D2RoomExFlags
{
	ROOMEXFLAG_INACTIVE = 0x00000002,
	ROOMEXFLAG_HAS_WARP_0 = 0x00000010,
	ROOMEXFLAG_HAS_WARP_1 = 0x00000020,
	ROOMEXFLAG_HAS_WARP_2 = 0x00000040,
	ROOMEXFLAG_HAS_WARP_3 = 0x00000080,
	ROOMEXFLAG_HAS_WARP_4 = 0x00000100,
	ROOMEXFLAG_HAS_WARP_5 = 0x00000200,
	ROOMEXFLAG_HAS_WARP_6 = 0x00000400,
	ROOMEXFLAG_HAS_WARP_7 = 0x00000800,
	ROOMEXFLAG_SUBSHRINE_ROW1 = 0x00001000,
	ROOMEXFLAG_SUBSHRINE_ROW2 = 0x00002000,
	ROOMEXFLAG_SUBSHRINE_ROW3 = 0x00004000,
	ROOMEXFLAG_SUBSHRINE_ROW4 = 0x00008000,
	ROOMEXFLAG_HAS_WAYPOINT = 0x00010000,			//outdoors with subtheme and subwaypoint
	ROOMEXFLAG_HAS_WAYPOINT_SMALL = 0x00020000,		//waypoint small
	ROOMEXFLAG_AUTOMAP_REVEAL = 0x00040000,
	ROOMEXFLAG_NO_LOS_DRAW = 0x00080000,
	ROOMEXFLAG_HAS_ROOM = 0x00100000,				//an active pRoom structure is attached to this RoomEx
	ROOMEXFLAG_ROOM_FREED_SRV = 0x00200000,			//set after freeing the pRoom
	ROOMEXFLAG_HASPORTAL = 0x00400000,				//prevents room deletion
	ROOMEXFLAG_POPULATION_ZERO = 0x00800000,		//set for towns, also set if a ds1 has populate=0 // nospawn region
	ROOMEXFLAG_TILELIB_LOADED = 0x01000000,
	ROOMEXFLAG_PRESET_UNITS_ADDED = 0x02000000,		//refers to DRLGMap or DRLGFile; adds the hardcoded preset units
	ROOMEXFLAG_PRESET_UNITS_SPAWNED = 0x04000000,	//set after RoomEx preset units have been spawned / prevents respawning them on room reactivation
	ROOMEXFLAG_ANIMATED_FLOOR = 0x08000000,			//animated floors (river of flame, hell act5)

	ROOMEXFLAG_HAS_WARP = (ROOMEXFLAG_HAS_WARP_0 | ROOMEXFLAG_HAS_WARP_1 | ROOMEXFLAG_HAS_WARP_2 | ROOMEXFLAG_HAS_WARP_3 | ROOMEXFLAG_HAS_WARP_4 | ROOMEXFLAG_HAS_WARP_5 | ROOMEXFLAG_HAS_WARP_6 | ROOMEXFLAG_HAS_WARP_7),
};

enum D2DrlgLevelFlags
{
	DRLGLEVELFLAG_AUTOMAP_REVEAL = 0x10,
};

enum D2PathTypes
{
	PATHTYPE_IDASTAR = 0,
	PATHTYPE_TOWARD = 2,
	PATHTYPE_MISSILE = 4,
	PATHTYPE_KNOCKBACK_SERVER = 8,
	PATHTYPE_KNOCKBACK_CLIENT = 11,
};
#endif // CONSTANTS_LEVELS

#ifndef CONSTANTS_MONSTERS //Pseudo-Macro to group all constants
enum D2InactiveMonsterFlags
{
	INACTIVEMONSTERFLAG_TYPE_OTHER = 0x00000001,
	INACTIVEMONSTERFLAG_TYPE_CHAMPION = 0x00000002,
	INACTIVEMONSTERFLAG_DEAD = 0x00000004,
	INACTIVEMONSTERFLAG_MINIONRELATED1 = 0x00000008,
	INACTIVEMONSTERFLAG_MINIONRELATED2 = 0x00000010,
	INACTIVEMONSTERFLAG_TYPE_MINION = 0x00000020,
	INACTIVEMONSTERFLAG_UNKSUMMONERFLAG = 0x00000040,
	INACTIVEMONSTERFLAG_ALIGNMENT1 = 0x00000080,
	INACTIVEMONSTERFLAG_ALIGNMENT2 = 0x00000100,
	INACTIVEMONSTERFLAG_ALIGNMENT0 = 0x00000200,
	INACTIVEMONSTERFLAG_NODEINDEXUNEQUAL11 = 0x00000400,
	INACTIVEMONSTERFLAG_TYPE_SUPERUNIQUE = 0x00000800,
};

enum D2C_MonTypeFlags
{
	MONTYPEFLAG_OTHER = 0x01,
	MONTYPEFLAG_SUPERUNIQUE = 0x02,
	MONTYPEFLAG_CHAMPION = 0x04,
	MONTYPEFLAG_UNIQUE = 0x08,
	MONTYPEFLAG_MINION = 0x10,
	MONTYPEFLAG_POSSESSED = 0x20,
	MONTYPEFLAG_GHOSTLY = 0x40,
	MONTYPEFLAG_MULTISHOT = 0x80
};

enum D2C_MonModes
{
	MONMODE_DEATH, 		//0x00 Death DT
	MONMODE_NEUTRAL, 	//0x01 Neutral NU
	MONMODE_WALK, 		//0x02 Walk WL
	MONMODE_GETHIT, 	//0x03 Get Hit GH
	MONMODE_ATTACK1, 	//0x04 Melee Attack A1
	MONMODE_ATTACK2, 	//0x05 Melee Attack A2
	MONMODE_BLOCK, 		//0x06 Block BL
	MONMODE_CAST, 		//0x07 Spell Cast SC
	MONMODE_SKILL1, 	//0x08 Special S1
	MONMODE_SKILL2, 	//0x09 Special S2
	MONMODE_SKILL3, 	//0x0A Special S3
	MONMODE_SKILL4, 	//0x0B Special S4
	MONMODE_DEAD, 		//0x0C Dead DD
	MONMODE_KNOCKBACK, 	//0x0D Knockback KB
	MONMODE_SEQUENCE, 	//0x0E Sequence SQ
	MONMODE_RUN			//0x0F Run RN
};

enum D2C_MercenaryClasses
{
	MERC_A1 = 0x10F, 	//Monstats Id Act 1 Mercenary
	MERC_A2 = 0x152, 	//Monstats Id Act 2 Mercenary
	MERC_A3 = 0x167, 	//Monstats Id Act 3 Mercenary
	MERC_A5 = 0x231		//Monstats Id Act 5 Mercenary
};

enum D2C_PetWarpMode
{
	PETMOVE_OWNERROOM,
	PETMOVE_OWNERPOS,
	PETMOVE_TOWNIDLE,
	PETMOVE_TELE,
	PETMOVE_SCATTER,
	PETMOVE_IDLE
};

enum D2C_MonUMods
{
	MONUMOD_NONE, 					//none
	MONUMOD_RNDNAME, 				//randomized name
	MONUMOD_HPMULTIPLY, 			//adds life%
	MONUMOD_LIGHT, 					//increased light radius
	MONUMOD_LEVELADD, 				//adds three mlvl
	MONUMOD_EXTRASTRONG, 			//extra strong, dmg
	MONUMOD_EXTRAFAST, 				//extra fast, faster
	MONUMOD_CURSED, 				//amplify damage on hit
	MONUMOD_MAGICRESISTANT, 		//increased elemental resists
	MONUMOD_FIRECHANT, 				//fire enchanted
	MONUMOD_POISDEATH, 				//poison cloud on death
	MONUMOD_WORMDEATH, 				//releases worms and insects on death (Duriel)
	MONUMOD_BRAVENDEATH, 			//only works for Blood raven
	MONUMOD_IGNOREAC, 				//Ignore defense
	MONUMOD_SPCDAMAGE, 				//unknown
	MONUMOD_KILLMINIONSDEATH, 		//all minions of the boss die when the boss is killed
	MONUMOD_CHAMPMODS, 				//related to champions mods
	MONUMOD_LIGHTCHANT, 			//lightning enchanted
	MONUMOD_COLDCHANT, 				//cold enchanted
	MONUMOD_UNUSEDMERCMOD, 			//old unused mercenary dmg mod, buggy
	MONUMOD_CHARGEDBOLTS, 			//charged bolts when struck (scarabs)
	MONUMOD_TEMPSUMMON, 			//used by summons that that are destroyed after a set time
	MONUMOD_QUESTMOD, 				//related to quests
	MONUMOD_POISONFIELD, 			//the boss is dealing poison damage in an aura-like method
	MONUMOD_THIEF, 					//unused, thief mod
	MONUMOD_MANABURN, 				//mana burn
	MONUMOD_TELEHEAL, 				//teleports randomly and heal
	MONUMOD_SPECTRALHIT, 			//spectral hit, elemental damage
	MONUMOD_STONESKIN, 				//physical resistance
	MONUMOD_MULTISHOT, 				//multi-shot
	MONUMOD_AURACHANT, 				//aura enchanted, random aura when eqquipped (from aura table)
	MONUMOD_CORPSEBOOMDEATH, 		//explosion of the corpse on death
	MONUMOD_FIREBOOMDEATH, 			//fire explosion on death
	MONUMOD_FREEZINDEATH, 			//freeze you on death
	MONUMOD_SELFRESURRECT, 			//self-resurrect for reanimated-horde
	MONUMOD_ICESHATTERDEATH, 		//ice shatter on death
	MONUMOD_CHAMPSTONED, 			//slowed down but stronger, for champions
	MONUMOD_CHAMPSTATS, 			//champs stats related
	MONUMOD_CHAMPCURSEIMMUNE, 		//champion cannot be cursed
	MONUMOD_CHAMPSTATS2, 			//related to champ stats
	MONUMOD_PAINWORMDEATH, 			//summons a pain work on death
	MONUMOD_ALWAYSRUNAI, 			//unknown
	MONUMOD_NOVADEATH				//nova on death
};


enum D2MapAIActions
{
	AIACTION_MODE_NU = 1,
	AIACTION_MODE_S1 = 4,
	AIACTION_MODE_S2 = 5,
};
#endif // CONSTANTS_MONSTERS

#ifndef CONSTANTS_OBJECTS //Pseudo-Macro to group all constants

enum D2ObjectSubClasses
{
	OBJSUBCLASS_SHRINE = 0x01,
	OBJSUBCLASS_OBELISK = 0x02,
	OBJSUBCLASS_TOWNPORTAL = 0x04,
	OBJSUBCLASS_CHEST = 0x08,
	OBJSUBCLASS_PORTAL = 0x10,
	OBJSUBCLASS_WELL = 0x20,
	OBJSUBCLASS_WAYPOINT = 0x40,
	OBJSUBCLASS_DOOR = 0x80,
};

#endif // CONSTANTS_OBJECTS

#ifndef CONSTANTS_SKILLS //Pseudo-Macro to group all constants

enum D2C_SkillCastType
{
	SKCASTTYPE_SHIFTLEFT = 0xE5,
	SKCASTTYPE_TARGETLEFT = 0xC5,
	SKCASTTYPE_SHIFTRIGHT = 0x66,
	SKCASTTYPE_RIGHT = 0x46
};

enum D2C_AuraFilters
{
	AURAFILTER_FINDPLAYER = 0x01,			//Targets Players Units
	AURAFILTER_FINDMONSTER = 0x02,			//Targets Monster Units
	AURAFILTER_FINDUNDEAD = 0x04,			//Targets Undead Monsters Units
	AURAFILTER_FINDMISSILE = 0x08,			//Targets Missiles Units			
	AURAFILTER_FINDOBJECT = 0x10,			//Target Objects Units
	AURAFILTER_FINDITEM = 0x20,				//Targets Items Units
	AURAFILTER_FINDISATT = 0x80,			//Targets Units with IsAtt (Monstats2)
	AURAFILTER_IGNINTOWN = 0x100,			//Ignore Units in Town
	AURAFILTER_USELOS = 0x200,				//Filter Uses Line of Sight
	AURAFILTER_FINDISSEL = 0x400,			//Targets Selectable Units
	AURAFILTER_FINDCORPSE = 0x1000,			//Targets Units Corpses
	AURAFILTER_IGNINTOWN2 = 0x2000,			//Ignore Units in Town
	AURAFILTER_IGNBOSS = 0x4000,			//Ignore Special Units (boss in monstats)
	AURAFILTER_IGNALLY = 0x8000,			//Ignore Allied Units
	AURAFILTER_FINDALLY = 0x10000,			//Targets Allied Units
	AURAFILTER_IGNPRIME = 0x40000,			//Ignore Prime Evils
	AURAFILTER_IGNJUSTHIT = 0x80000			//Ignore Units with Justhit State
};

enum D2C_SkillFlags
{
	SKFLAG_PASSIVE = 0x00000001,
	SKFLAG_RSKILLONLY = 0x00000002,
	SKFLAG_TARGETABLE = 0x00000004,
	SKFLAG_NEEDCORPSE = 0x00000008,
	SKFLAG_INTOWN = 0x00000010,
	SKFLAG_PHYSICAL = 0x00000020,
	SKFLAG_MAGICAL = 0x00000040,
	SKFLAG_FIRE = 0x00000080,
	SKFLAG_COLD = 0x00000100,
	SKFLAG_LTNG = 0x00000200,
	SKFLAG_POIS = 0x00000400,
	SKFLAG_KNOCKBACK = 0x00000800,
	SKFLAG_STUN = 0x00001000,
	SKFLAG_RADIUSEFFECT = 0x00002000,
	SKFLAG_MELEE = 0x00004000,
	SKFLAG_SUMMON = 0x00008000,
	SKFLAG_PARTYCAST = 0x00010000,
	SKFLAG_GUIDED = 0x00020000
};

enum D2C_SkillUseStates
{
	SKILLUSTATE_USABLE = 0,
	SKILLUSTATE_NOMANA = 1,
	SKILLUSTATE_NOQUANTITY = 2,
	SKILLUSTATE_DISABLED = 3,
	SKILLUSTATE_SHAPERESTRICT = 4,
	SKILLUSTATE_PASSIVE = 5,
	SKILLUSTATE_AURA = 6,
	SKILLUSTATE_NOLEVEL = 7,
	SKILLUSTATE_BLOCKED = 8,
};

#endif // CONSTANTS_SKILLS

#ifndef CONSTANTS_STATS //Pseudo-Macro to group all constants
enum D2C_ItemStats
{
	STAT_INVALID = -1,
	STAT_STRENGTH = 0, 					// 000
	STAT_ENERGY, 						// 001
	STAT_DEXTERITY, 						// 002
	STAT_VITALITY, 						// 003
	STAT_STATPTS, 						// 004
	STAT_SKILLPTS, 						// 005
	STAT_HITPOINTS, 						// 006
	STAT_MAXHP, 							// 007
	STAT_MANA, 							// 008
	STAT_MAXMANA, 						// 009
	STAT_STAMINA, 						// 00A
	STAT_MAXSTAMINA, 					// 00B
	STAT_LEVEL, 							// 00C
	STAT_EXPERIENCE, 					// 00D
	STAT_GOLD, 							// 00E
	STAT_GOLDBANK, 						// 00F
	STAT_ITEM_ARMOR_PERCENT, 			// 010
	STAT_ITEM_MAXDAMAGE_PERCENT, 		// 011
	STAT_ITEM_MINDAMAGE_PERCENT, 		// 012
	STAT_TOHIT,
	STAT_TOBLOCK,
	STAT_MINDAMAGE,
	STAT_MAXDAMAGE,
	STAT_SECONDARY_MINDAMAGE,
	STAT_SECONDARY_MAXDAMAGE,
	STAT_DAMAGEPERCENT,
	STAT_MANARECOVERY,
	STAT_MANARECOVERYBONUS,
	STAT_STAMINARECOVERYBONUS,
	STAT_LASTEXP,
	STAT_NEXTEXP,
	STAT_ARMORCLASS,
	STAT_ARMORCLASS_VS_MISSILE,
	STAT_ARMORCLASS_VS_HTH,
	STAT_NORMAL_DAMAGE_REDUCTION,
	STAT_MAGIC_DAMAGE_REDUCTION,
	STAT_DAMAGERESIST,
	STAT_MAGICRESIST,
	STAT_MAXMAGICRESIST,
	STAT_FIRERESIST,
	STAT_MAXFIRERESIST,
	STAT_LIGHTRESIST,
	STAT_MAXLIGHTRESIST,
	STAT_COLDRESIST,
	STAT_MAXCOLDRESIST,
	STAT_POISONRESIST,
	STAT_MAXPOISONRESIST,
	STAT_DAMAGEAURA,
	STAT_FIREMINDAM,
	STAT_FIREMAXDAM,
	STAT_LIGHTMINDAM,
	STAT_LIGHTMAXDAM,
	STAT_MAGICMINDAM,
	STAT_MAGICMAXDAM,
	STAT_COLDMINDAM,
	STAT_COLDMAXDAM,
	STAT_COLDLENGTH,
	STAT_POISONMINDAM,
	STAT_POISONMAXDAM,
	STAT_POISONLENGTH,
	STAT_LIFEDRAINMINDAM,
	STAT_LIFEDRAINMAXDAM,
	STAT_MANADRAINMINDAM,
	STAT_MANADRAINMAXDAM,
	STAT_STAMDRAINMINDAM,
	STAT_STAMDRAINMAXDAM,
	STAT_STUNLENGTH,
	STAT_VELOCITYPERCENT,
	STAT_ATTACKRATE,
	STAT_OTHER_ANIMRATE,
	STAT_QUANTITY,
	STAT_VALUE,
	STAT_DURABILITY,
	STAT_MAXDURABILITY,
	STAT_HPREGEN,
	STAT_ITEM_MAXDURABILITY_PERCENT,
	STAT_ITEM_MAXHP_PERCENT,
	STAT_ITEM_MAXMANA_PERCENT,
	STAT_ITEM_ATTACKERTAKESDAMAGE,
	STAT_ITEM_GOLDBONUS,
	STAT_ITEM_MAGICBONUS,
	STAT_ITEM_KNOCKBACK,
	STAT_ITEM_TIMEDURATION,
	STAT_ITEM_ADDCLASSSKILLS,
	STAT_UNSENTPARAM1,
	STAT_ITEM_ADDEXPERIENCE,
	STAT_ITEM_HEALAFTERKILL,
	STAT_ITEM_REDUCEDPRICES,
	STAT_ITEM_DOUBLEHERBDURATION,
	STAT_ITEM_LIGHTRADIUS,
	STAT_ITEM_LIGHTCOLOR,
	STAT_ITEM_REQ_PERCENT,
	STAT_ITEM_LEVELREQ,
	STAT_ITEM_FASTERATTACKRATE,
	STAT_ITEM_LEVELREQPCT,
	STAT_LASTBLOCKFRAME,
	STAT_ITEM_FASTERMOVEVELOCITY,
	STAT_ITEM_NONCLASSSKILL,
	STAT_STATE,
	STAT_ITEM_FASTERGETHITRATE,
	STAT_MONSTER_PLAYERCOUNT,
	STAT_SKILL_POISON_OVERRIDE_LENGTH,
	STAT_ITEM_FASTERBLOCKRATE,
	STAT_SKILL_BYPASS_UNDEAD,
	STAT_SKILL_BYPASS_DEMONS,
	STAT_ITEM_FASTERCASTRATE,
	STAT_SKILL_BYPASS_BEASTS,
	STAT_ITEM_SINGLESKILL,
	STAT_ITEM_RESTINPEACE,
	STAT_CURSE_RESISTANCE,
	STAT_ITEM_POISONLENGTHRESIST,
	STAT_ITEM_NORMALDAMAGE,
	STAT_ITEM_HOWL,
	STAT_ITEM_STUPIDITY,
	STAT_ITEM_DAMAGETOMANA,
	STAT_ITEM_IGNORETARGETAC,
	STAT_ITEM_FRACTIONALTARGETAC,
	STAT_ITEM_PREVENTHEAL,
	STAT_ITEM_HALFFREEZEDURATION,
	STAT_ITEM_TOHIT_PERCENT,
	STAT_ITEM_DAMAGETARGETAC,
	STAT_ITEM_DEMONDAMAGE_PERCENT,
	STAT_ITEM_UNDEADDAMAGE_PERCENT,
	STAT_ITEM_DEMON_TOHIT,
	STAT_ITEM_UNDEAD_TOHIT,
	STAT_ITEM_THROWABLE,
	STAT_ITEM_ELEMSKILL,
	STAT_ITEM_ALLSKILLS,
	STAT_ITEM_ATTACKERTAKESLIGHTDAMAGE,
	STAT_IRONMAIDEN_LEVEL,
	STAT_LIFETAP_LEVEL,
	STAT_THORNS_PERCENT,
	STAT_BONEARMOR,
	STAT_BONEARMORMAX,
	STAT_ITEM_FREEZE,
	STAT_ITEM_OPENWOUNDS,
	STAT_ITEM_CRUSHINGBLOW,
	STAT_ITEM_KICKDAMAGE,
	STAT_ITEM_MANAAFTERKILL,
	STAT_ITEM_HEALAFTERDEMONKILL,
	STAT_ITEM_EXTRABLOOD,
	STAT_ITEM_DEADLYSTRIKE,
	STAT_ITEM_ABSORBFIRE_PERCENT,
	STAT_ITEM_ABSORBFIRE,
	STAT_ITEM_ABSORBLIGHT_PERCENT,
	STAT_ITEM_ABSORBLIGHT,
	STAT_ITEM_ABSORBMAGIC_PERCENT,
	STAT_ITEM_ABSORBMAGIC,
	STAT_ITEM_ABSORBCOLD_PERCENT,
	STAT_ITEM_ABSORBCOLD,
	STAT_ITEM_SLOW,
	STAT_ITEM_AURA,
	STAT_ITEM_INDESCTRUCTIBLE,
	STAT_ITEM_CANNOTBEFROZEN,
	STAT_ITEM_STAMINADRAINPCT,
	STAT_ITEM_REANIMATE,
	STAT_ITEM_PIERCE,
	STAT_ITEM_MAGICARROW,
	STAT_ITEM_EXPLOSIVEARROW,
	STAT_ITEM_THROW_MINDAMAGE,
	STAT_ITEM_THROW_MAXDAMAGE,
	STAT_SKILL_HANDOFATHENA,
	STAT_SKILL_STAMINAPERCENT,
	STAT_SKILL_PASSIVE_STAMINAPERCENT,
	STAT_SKILL_CONCENTRATION,
	STAT_SKILL_ENCHANT,
	STAT_SKILL_PIERCE,
	STAT_SKILL_CONVICTION,
	STAT_SKILL_CHILLINGARMOR,
	STAT_SKILL_FRENZY,
	STAT_SKILL_DECREPIFY,
	STAT_SKILL_ARMOR_PERCENT,
	STAT_ALIGNMENT,
	STAT_TARGET0,
	STAT_TARGET1,
	STAT_GOLDLOST,
	STAT_CONVERSION_LEVEL,
	STAT_CONVERSION_MAXHP,
	STAT_UNIT_DOOVERLAY,
	STAT_ATTACK_VS_MONTYPE,
	STAT_DAMAGE_VS_MONTYPE,
	STAT_FADE,
	STAT_ARMOR_OVERRIDE_PERCENT,
	STAT_UNUSED183,
	STAT_UNUSED184,
	STAT_UNUSED185,
	STAT_UNUSED186,
	STAT_UNUSED187,
	STAT_ITEM_ADDSKILL_TAB,
	STAT_UNUSED189,
	STAT_UNUSED190,
	STAT_UNUSED191,
	STAT_UNUSED192,
	STAT_UNUSED193,
	STAT_ITEM_NUMSOCKETS,
	STAT_ITEM_SKILLONATTACK,
	STAT_ITEM_SKILLONKILL,
	STAT_ITEM_SKILLONDEATH,
	STAT_ITEM_SKILLONHIT,
	STAT_ITEM_SKILLONLEVELUP,
	STAT_UNUSED200,
	STAT_ITEM_SKILLONGETHIT,
	STAT_UNUSED202,
	STAT_UNUSED203,
	STAT_ITEM_CHARGED_SKILL,
	STAT_UNUSED204,
	STAT_UNUSED205,
	STAT_UNUSED206,
	STAT_UNUSED207,
	STAT_UNUSED208,
	STAT_UNUSED209,
	STAT_UNUSED210,
	STAT_UNUSED211,
	STAT_UNUSED212,
	STAT_ITEM_ARMOR_PERLEVEL,
	STAT_ITEM_ARMORPERCENT_PERLEVEL,
	STAT_ITEM_HP_PERLEVEL,
	STAT_ITEM_MANA_PERLEVEL,
	STAT_ITEM_MAXDAMAGE_PERLEVEL,
	STAT_ITEM_MAXDAMAGE_PERCENT_PERLEVEL,
	STAT_ITEM_STRENGTH_PERLEVEL,
	STAT_ITEM_DEXTERITY_PERLEVEL,
	STAT_ITEM_ENERGY_PERLEVEL,
	STAT_ITEM_VITALITY_PERLEVEL,
	STAT_ITEM_TOHIT_PERLEVEL,
	STAT_ITEM_TOHITPERCENT_PERLEVEL,
	STAT_ITEM_COLD_DAMAGEMAX_PERLEVEL,
	STAT_ITEM_FIRE_DAMAGEMAX_PERLEVEL,
	STAT_ITEM_LTNG_DAMAGEMAX_PERLEVEL,
	STAT_ITEM_POIS_DAMAGEMAX_PERLEVEL,
	STAT_ITEM_RESIST_COLD_PERLEVEL,
	STAT_ITEM_RESIST_FIRE_PERLEVEL,
	STAT_ITEM_RESIST_LTNG_PERLEVEL,
	STAT_ITEM_RESIST_POIS_PERLEVEL,
	STAT_ITEM_ABSORB_COLD_PERLEVEL,
	STAT_ITEM_ABSORB_FIRE_PERLEVEL,
	STAT_ITEM_ABSORB_LTNG_PERLEVEL,
	STAT_ITEM_ABSORB_POIS_PERLEVEL,
	STAT_ITEM_THORNS_PERLEVEL,
	STAT_ITEM_FIND_GOLD_PERLEVEL,
	STAT_ITEM_FIND_MAGIC_PERLEVEL,
	STAT_ITEM_REGENSTAMINA_PERLEVEL,
	STAT_ITEM_STAMINA_PERLEVEL,
	STAT_ITEM_DAMAGE_DEMON_PERLEVEL,
	STAT_ITEM_DAMAGE_UNDEAD_PERLEVEL,
	STAT_ITEM_TOHIT_DEMON_PERLEVEL,
	STAT_ITEM_TOHIT_UNDEAD_PERLEVEL,
	STAT_ITEM_CRUSHINGBLOW_PERLEVEL,
	STAT_ITEM_OPENWOUNDS_PERLEVEL,
	STAT_ITEM_KICK_DAMAGE_PERLEVEL,
	STAT_ITEM_DEADLYSTRIKE_PERLEVEL,
	STAT_ITEM_FIND_GEMS_PERLEVEL,
	STAT_ITEM_REPLENISH_DURABILITY,
	STAT_ITEM_REPLENISH_QUANTITY,
	STAT_ITEM_EXTRA_STACK,
	STAT_ITEM_FIND_ITEM,
	STAT_ITEM_SLASH_DAMAGE,
	STAT_ITEM_SLASH_DAMAGE_PERCENT,
	STAT_ITEM_CRUSH_DAMAGE,
	STAT_ITEM_CRUSH_DAMAGE_PERCENT,
	STAT_ITEM_THRUST_DAMAGE,
	STAT_ITEM_THRUST_DAMAGE_PERCENT,
	STAT_ITEM_ABSORB_SLASH,
	STAT_ITEM_ABSORB_CRUSH,
	STAT_ITEM_ABSORB_THRUST,
	STAT_ITEM_ABSORB_SLASH_PERCENT,
	STAT_ITEM_ABSORB_CRUSH_PERCENT,
	STAT_ITEM_ABSORB_THRUST_PERCENT,
	STAT_ITEM_ARMOR_BYTIME,
	STAT_ITEM_ARMORPERCENT_BYTIME,
	STAT_ITEM_HP_BYTIME,
	STAT_ITEM_MANA_BYTIME,
	STAT_ITEM_MAXDAMAGE_BYTIME,
	STAT_ITEM_MAXDAMAGE_PERCENT_BYTIME,
	STAT_ITEM_STRENGTH_BYTIME,
	STAT_ITEM_DEXTERITY_BYTIME,
	STAT_ITEM_ENERGY_BYTIME,
	STAT_ITEM_VITALITY_BYTIME,
	STAT_ITEM_TOHIT_BYTIME,
	STAT_ITEM_TOHITPERCENT_BYTIME,
	STAT_ITEM_COLD_DAMAGEMAX_BYTIME,
	STAT_ITEM_FIRE_DAMAGEMAX_BYTIME,
	STAT_ITEM_LTNG_DAMAGEMAX_BYTIME,
	STAT_ITEM_POIS_DAMAGEMAX_BYTIME,
	STAT_ITEM_RESIST_COLD_BYTIME,
	STAT_ITEM_RESIST_FIRE_BYTIME,
	STAT_ITEM_RESIST_LTNG_BYTIME,
	STAT_ITEM_RESIST_POIS_BYTIME,
	STAT_ITEM_ABSORB_COLD_BYTIME,
	STAT_ITEM_ABSORB_FIRE_BYTIME,
	STAT_ITEM_ABSORB_LTNG_BYTIME,
	STAT_ITEM_ABSORB_POIS_BYTIME,
	STAT_ITEM_FIND_GOLD_BYTIME,
	STAT_ITEM_FIND_MAGIC_BYTIME,
	STAT_ITEM_REGENSTAMINA_BYTIME,
	STAT_ITEM_STAMINA_BYTIME,
	STAT_ITEM_DAMAGE_DEMON_BYTIME,
	STAT_ITEM_DAMAGE_UNDEAD_BYTIME,
	STAT_ITEM_TOHIT_DEMON_BYTIME,
	STAT_ITEM_TOHIT_UNDEAD_BYTIME,
	STAT_ITEM_CRUSHINGBLOW_BYTIME,
	STAT_ITEM_OPENWOUNDS_BYTIME,
	STAT_ITEM_KICK_DAMAGE_BYTIME,
	STAT_ITEM_DEADLYSTRIKE_BYTIME,
	STAT_ITEM_FIND_GEMS_BYTIME,
	STAT_ITEM_PIERCE_COLD,
	STAT_ITEM_PIERCE_FIRE,
	STAT_ITEM_PIERCE_LTNG,
	STAT_ITEM_PIERCE_POIS,
	STAT_ITEM_DAMAGE_VS_MONSTER,
	STAT_ITEM_DAMAGE_PERCENT_VS_MONSTER,
	STAT_ITEM_TOHIT_VS_MONSTER,
	STAT_ITEM_TOHIT_PERCENT_VS_MONSTER,
	STAT_ITEM_AC_VS_MONSTER,
	STAT_ITEM_AC_PERCENT_VS_MONSTER,
	STAT_FIRELENGTH,
	STAT_BURNINGMIN,
	STAT_BURNINGMAX,
	STAT_PROGRESSIVE_DAMAGE,
	STAT_PROGRESSIVE_STEAL,
	STAT_PROGRESSIVE_OTHER,
	STAT_PROGRESSIVE_FIRE,
	STAT_PROGRESSIVE_COLD,
	STAT_PROGRESSIVE_LIGHTNING,
	STAT_ITEM_EXTRA_CHARGES,
	STAT_PROGRESSIVE_TOHIT,
	STAT_POISON_COUNT,
	STAT_DAMAGE_FRAMERATE,
	STAT_PIERCE_IDX,
	STAT_PASSIVE_FIRE_MASTERY,
	STAT_PASSIVE_LTNG_MASTERY,
	STAT_PASSIVE_COLD_MASTERY,
	STAT_PASSIVE_POIS_MASTERY,
	STAT_PASSIVE_FIRE_PIERCE,
	STAT_PASSIVE_LTNG_PIERCE,
	STAT_PASSIVE_COLD_PIERCE,
	STAT_PASSIVE_POIS_PIERCE,
	STAT_PASSIVE_CRITICAL_STRIKE,
	STAT_PASSIVE_DODGE,
	STAT_PASSIVE_AVOID,
	STAT_PASSIVE_EVADE,
	STAT_PASSIVE_WARMTH,
	STAT_PASSIVE_MASTERY_MELEE_TH,
	STAT_PASSIVE_MASTERY_MELEE_DMG,
	STAT_PASSIVE_MASTERY_MELEE_CRIT,
	STAT_PASSIVE_MASTERY_THROW_TH,
	STAT_PASSIVE_MASTERY_THROW_DMG,
	STAT_PASSIVE_MASTERY_THROW_CRIT,
	STAT_PASSIVE_WEAPONBLOCK,
	STAT_PASSIVE_SUMMON_RESIST,
	STAT_MODIFIERLIST_SKILL,
	STAT_MODIFIERLIST_LEVEL,
	STAT_LAST_SENT_HP_PCT,
	STAT_SOURCE_UNIT_TYPE,
	STAT_SOURCE_UNIT_ID,
	STAT_SHORTPARAM1,
	STAT_QUESTITEMDIFFICULTY,
	STAT_PASSIVE_MAG_MASTERY,
	STAT_PASSIVE_MAG_PIERCE,
};

enum D2C_PropertyModes
{
	PROPMODE_AFFIX,
	PROPMODE_GRADE,
	PROPMODE_GEM,
	PROPMODE_UNIQUE,
	PROPMODE_SET,
	PROPMODE_RUNE,
	PROPMODE_RUNEWORD,
	PROPMODE_UNUSED
};

enum D2C_PropertySets
{
	PROPSET_WEAPON,
	PROPSET_HELM,
	PROPSET_SHIELD,
};

enum D2C_StatlistFlags
{
	LISTFLAG_BASIC = 0x00000001,
	LISTFLAG_LENGTH = 0x0000002,
	LISTFLAG_TEMP = 0x00000004,
	LISTFLAG_BUFF = 0x00000008,
	LISTFLAG_CURSE = 0x00000020,
	LISTFLAG_MAGICSTATS = 0x00000040,
	LISTFLAG_CONVERT = 0x00000800,
	LISTFLAG_LISTEX = 0x80000000
};
#endif // CONSTANTS_STATS

#ifndef CONSTANTS_STATES //Pseudo-Macro to group all constants
enum D2C_StateTransformTypes
{
	TRANSFORMTYPE_PLAYER = 1,
	TRANSFORMTYPE_MONSTER = 2,
};

enum D2C_States
{
	STATE_NONE = 0,
	STATE_FREEZE,
	STATE_POISON,
	STATE_RESISTFIRE,
	STATE_RESISTCOLD,
	STATE_RESISTLIGHT,
	STATE_RESISTMAGIC,
	STATE_PLAYERBODY,
	STATE_RESISTALL,
	STATE_AMPLIFYDAMAGE,
	STATE_FROZENARMOR,
	STATE_COLD,
	STATE_INFERNO,
	STATE_BLAZE,
	STATE_BONEARMOR,
	STATE_CONCENTRATE,
	STATE_ENCHANT,
	STATE_INNERSIGHT,
	STATE_SKILL_MOVE,
	STATE_WEAKEN,
	STATE_CHILLINGARMOR,
	STATE_STUNNED,
	STATE_SPIDERLAY,
	STATE_DIMVISION,
	STATE_SLOWED,
	STATE_FETISHAURA,
	STATE_SHOUT,
	STATE_TAUNT,
	STATE_CONVICTION,
	STATE_CONVICTED,
	STATE_ENERGYSHIELD,
	STATE_VENOMCLAWS,
	STATE_BATTLEORDERS,
	STATE_MIGHT,
	STATE_PRAYER,
	STATE_HOLYFIRE,
	STATE_THORNS,
	STATE_DEFIANCE,
	STATE_THUNDERSTORM,
	STATE_LIGHTNINGBOLT,
	STATE_BLESSEDAIM,
	STATE_STAMINA,
	STATE_CONCENTRATION,
	STATE_HOLYWIND,
	STATE_HOLYWINDCOLD,
	STATE_CLEANSING,
	STATE_HOLYSHOCK,
	STATE_SANCTUARY,
	STATE_MEDITATION,
	STATE_FANATICISM,
	STATE_REDEMPTION,
	STATE_BATTLECOMMAND,
	STATE_PREVENTHEAL,
	STATE_CONVERSION,
	STATE_UNINTERRUPTABLE,
	STATE_IRONMAIDEN,
	STATE_TERROR,
	STATE_ATTRACT,
	STATE_LIFETAP,
	STATE_CONFUSE,
	STATE_DECREPIFY,
	STATE_LOWERRESIST,
	STATE_OPENWOUNDS,
	STATE_DOPPLEZON,
	STATE_CRITICALSTRIKE,
	STATE_DODGE,
	STATE_AVOID,
	STATE_PENETRATE,
	STATE_EVADE,
	STATE_PIERCE,
	STATE_WARMTH,
	STATE_FIREMASTERY,
	STATE_LIGHTNINGMASTERY,
	STATE_COLDMASTERY,
	STATE_SWORDMASTERY,
	STATE_AXEMASTERY,
	STATE_MACEMASTERY,
	STATE_POLEARMMASTERY,
	STATE_THROWINGMASTERY,
	STATE_SPEARMASTERY,
	STATE_INCREASEDSTAMINA,
	STATE_IRONSKIN,
	STATE_INCREASEDSPEED,
	STATE_NATURALRESISTANCE,
	STATE_FINGERMAGECURSE,
	STATE_NOMANAREGEN,
	STATE_JUSTHIT,
	STATE_SLOWMISSILES,
	STATE_SHIVERARMOR,
	STATE_BATTLECRY,
	STATE_BLUE,
	STATE_RED,
	STATE_DEATH_DELAY,
	STATE_VALKYRIE,
	STATE_FRENZY,
	STATE_BERSERK,
	STATE_REVIVE,
	STATE_ITEMFULLSET,
	STATE_SOURCEUNIT,
	STATE_REDEEMED,
	STATE_HEALTHPOT,
	STATE_HOLYSHIELD,
	STATE_JUST_PORTALED,
	STATE_MONFRENZY,
	STATE_CORPSE_NODRAW,
	STATE_ALIGNMENT,
	STATE_MANAPOT,
	STATE_SHATTER,
	STATE_SYNC_WARPED,
	STATE_CONVERSION_SAVE,
	STATE_PREGNANT,
	STATE_111,
	STATE_RABIES,
	STATE_DEFENSE_CURSE,
	STATE_BLOOD_MANA,
	STATE_BURNING,
	STATE_DRAGONFLIGHT,
	STATE_MAUL,
	STATE_CORPSE_NOSELECT,
	STATE_SHADOWWARRIOR,
	STATE_FERALRAGE,
	STATE_SKILLDELAY,
	STATE_PROGRESSIVE_DAMAGE,
	STATE_PROGRESSIVE_STEAL,
	STATE_PROGRESSIVE_OTHER,
	STATE_PROGRESSIVE_FIRE,
	STATE_PROGRESSIVE_COLD,
	STATE_PROGRESSIVE_LIGHTNING,
	STATE_SHRINE_ARMOR,
	STATE_SHRINE_COMBAT,
	STATE_SHRINE_RESIST_LIGHTNING,
	STATE_SHRINE_RESIST_FIRE,
	STATE_SHRINE_RESIST_COLD,
	STATE_SHRINE_RESIST_POISON,
	STATE_SHRINE_SKILL,
	STATE_SHRINE_MANA_REGEN,
	STATE_SHRINE_STAMINA,
	STATE_SHRINE_EXPERIENCE,
	STATE_FENRIS_RAGE,
	STATE_WOLF,
	STATE_BEAR,
	STATE_BLOODLUST,
	STATE_CHANGECLASS,
	STATE_ATTACHED,
	STATE_HURRICANE,
	STATE_ARMAGEDDON,
	STATE_INVIS,
	STATE_BARBS,
	STATE_WOLVERINE,
	STATE_OAKSAGE,
	STATE_VINE_BEAST,
	STATE_CYCLONEARMOR,
	STATE_CLAWMASTERY,
	STATE_CLOAK_OF_SHADOWS,
	STATE_RECYCLED,
	STATE_WEAPONBLOCK,
	STATE_CLOAKED,
	STATE_QUICKNESS,
	STATE_BLADESHIELD,
	STATE_FADE,
	STATE_SUMMONRESIST,
	STATE_OAKSAGECONTROL,
	STATE_WOLVERINECONTROL,
	STATE_BARBSCONTROL,
	STATE_DEBUGCONTROL,
	STATE_ITEMSET1,
	STATE_ITEMSET2,
	STATE_ITEMSET3,
	STATE_ITEMSET4,
	STATE_ITEMSET5,
	STATE_ITEMSET6,
	STATE_RUNEWORD,
	STATE_RESTINPEACE,
	STATE_CORPSEEXP,
	STATE_WHIRLWIND,
	STATE_FULLSETGENERIC,
	STATE_MONSTERSET,
	STATE_DELERIUM,
	STATE_ANTIDOTE,
	STATE_THAWING,
	STATE_STAMINAPOT,
	STATE_PASSIVE_RESISTFIRE,
	STATE_PASSIVE_RESISTCOLD,
	STATE_PASSIVE_RESISTLTNG,
	STATE_UBERMINION,
};
#endif // CONSTANTS_STATES

#ifndef CONSTANTS_UNITS //Pseudo-Macro to group all constants
enum D2C_UnitTypes
{
	UNIT_PLAYER,
	UNIT_MONSTER,
	UNIT_OBJECT,
	UNIT_MISSILE,
	UNIT_ITEM,
	UNIT_TILE,
};

enum D2C_UnitFlags
{
	UNITFLAG_DOUPDATE = 0x00000001,				//tells to update the unit
	UNITFLAG_TARGETABLE = 0x00000002,			//whenever the unit can be selected or not
	UNITFLAG_CANBEATTACKED = 0x00000004,		//whenever the unit can be attacked
	UNITFLAG_ISVALIDTARGET = 0x00000008,		//used to check if unit is a valid target
	UNITFLAG_INITSEEDSET = 0x00000010,			//tells whenever the unit seed has been initialized
	UNITFLAG_DRAWSHADOW = 0x00000020,			//tells whenver to draw a shadow or not (client only)
	UNITFLAG_SKSRVDOFUNC = 0x00000040,			//set when skill srvdofunc is executed
	UNITFLAG_OBJPREOPERATE = 0x00000080,		//unknown, used by objects with pre-operate disabled
	UNITFLAG_HASTXTMSG = 0x00000100,			//whenever this unit has a text message attached to it
	UNITFLAG_ISMERC = 0x00000200,				//is mercenary unit
	UNITFLAG_HASEVENTSOUND = 0x00000400,		//does this unit have an event-sound attached to it (server)
	UNITFLAG_SUMMONER = 0x00000800,				//set for the summoner only
	UNITFLAG_SENDREFRESHMSG = 0x00001000,		//used by items to send a refresh message when it drops on ground
	UNITFLAG_ISLINKREFRESHMSG = 0x00002000,		//tells whenever this unit is linked to an update message chain
	UNITFLAG_SQGFXCHANGE = 0x00004000,			//tells whenever to load new anim for skill SQ
	UNITFLAG_UPGRLIFENHITCLASS = 0x00008000,	//updates life% and hitclass on client
	UNITFLAG_ISDEAD = 0x00010000,				//unit is dead
	UNITFLAG_NOTC = 0x00020000,					//disables treasureclass drops
	UNITFLAG_MONMODEISCHANGING = 0x00080000,	//set when monmode changes
	UNITFLAG_PREDRAW = 0x00100000,				//pre-draw this unit (like floor tiles, client only)
	UNITFLAG_ISASYNC = 0x00200000,				//is async unit (critters)
	UNITFLAG_ISCLIENTUNIT = 0x00400000,			//is client unit
	UNITFLAG_ISINIT = 0x01000000,				//set when unit has been initialized
	UNITFLAG_ISRESURRECT = 0x02000000,			//set for resurrected units and items on floor
	UNITFLAG_NOXP = 0x04000000,					//no xp gain from killing this unit
	UNITFLAG_AUTOMAP = 0x10000000,				//automap stuff
	UNITFLAG_AUTOMAP2 = 0x20000000,				//automap stuff
	UNITFLAG_PETIGNORE = 0x40000000,			//ignored by pets
	UNITFLAG_ISREVIVE = 0x80000000				//is revived monster
};

enum D2C_UnitFlagsEx
{
	UNITFLAGEX_HASINV = 0x00000001,				//unit has inventory attached to it
	UNITFLAGEX_UPDATEINV = 0x00000002,			//tells to update inventory content
	UNITFLAGEX_ISVENDORITEM = 0x00000004,		//set for vendor shop items
	UNITFLAGEX_ISSHAPESHIFTED = 0x00000008,		//unit is shapeshifted
	UNITFLAGEX_ITEMINIT = 0x00000010,			//set for items, related to init
	UNITFLAGEX_ISINLOS = 0x00000080,			//unit is in client's line of sight
	UNITFLAGEX_HASBEENDELETED = 0x00000100,		//unit has been deleted but not free'd yet
	UNITFLAGEX_STOREOWNERINFO = 0x00000400,		//unit stores info about owner
	UNITFLAGEX_ISCORPSE = 0x00001000,			//unit is a corpse (use UNITFLAG_ISDEAD instead)
	UNITFLAGEX_TELEPORTED = 0x00010000,			//unit has been teleported, needs resync
	UNITFLAGEX_STORELASTATTACKER = 0x00020000,	//unit stores info about last attacker
	UNITFLAGEX_NODRAW = 0x00040000,				//don't draw this unit
	UNITFLAGEX_ISEXPANSION = 0x02000000,		//is expansion unit
	UNITFLAGEX_SERVERUNIT = 0x04000000			//is server-side unit
};

////////////////////////////
// PLAYER UNIT CONSTANTS ///
////////////////////////////

enum D2C_PlayerModes
{
	PLRMODE_DEATH,		// DT
	PLRMODE_NEUTRAL,	// NU
	PLRMODE_WALK,		// WL
	PLRMODE_RUN,		// RN
	PLRMODE_GETHIT,		// GH
	PLRMODE_TNEUTRAL,	// TN
	PLRMODE_TWALK,		// TW
	PLRMODE_ATTACK1,	// A1
	PLRMODE_ATTACK2,	// A2
	PLRMODE_BLOCK,		// BL
	PLRMODE_CAST,		// SC
	PLRMODE_THROW,		// TH
	PLRMODE_KICK,		// KK
	PLRMODE_SPECIAL1,	// S1
	PLRMODE_SPECIAL2,	// S2
	PLRMODE_SPECIAL3,	// S3
	PLRMODE_SPECIAL4,	// S4
	PLRMODE_DEAD,		// DD
	PLRMODE_SEQUENCE,	// SQ
	PLRMODE_KNOCKBACK	// KB
};

enum D2C_PlayerClasses
{
	PCLASS_AMAZON,
	PCLASS_SORCERESS,
	PCLASS_NECROMANCER,
	PCLASS_PALADIN,
	PCLASS_BARBARIAN,
	PCLASS_DRUID,
	PCLASS_ASSASSIN,
	PCLASS_EVILFORCE,
	PCLASS_INVALID = 7,
	NUMBER_OF_PLAYERCLASSES = 7,
};

enum D2C_ClientStates
{
	CLTSTATE_CONNECTED = 4
};

enum D2C_PlayerFlags
{
	PLRFLAG_NEWBIE = 0x01,
	PLRFLAG_HARDCORE = 0x04,
	PLRFLAG_DEAD = 0x08,
	PLRFLAG_EXPANSION = 0x20,
	PLRFLAG_LADDER = 0x40,
};

enum D2C_RosterInfoFlags
{
	ROSTERINFOFLAG_LOOT = 0x01,
	ROSTERINFOFLAG_IGNORE = 0x02,
	ROSTERINFOFLAG_SQUELCH = 0x04,
	ROSTERINFOFLAG_HOSTILE = 0x08,
};

enum D2C_RosterControlFlags
{
	ROSTERCONTROLFLAG_INVITE = 0,
	ROSTERCONTROLFLAG_INPARTY = 1,
	ROSTERCONTROLFLAG_ACCEPT = 2,
	ROSTERCONTROLFLAG_LEAVE = 3,
	ROSTERCONTROLFLAG_CANCEL = 4,
};

enum D2C_RosterButtonTypes
{
	ROSTERBUTTONTYPE_HOSTILE = 1,
	ROSTERBUTTONTYPE_LOOT = 2,
	ROSTERBUTTONTYPE_IGNORE = 3,
	ROSTERBUTTONTYPE_SQUELCH = 4,
};

enum D2SaveCharType
{
	CHARTYPE_HARDCORE = 0x24,
	CHARTYPE_SOFTCORE = 0x28
};
#endif // CONSTANTS_UNITS

#ifndef CONSTANTS_DATATABLES //Pseudo-Macro to group all constants

enum D2C_TxtLinkerIndexTypes
{
	TXTLINKER_NONE,
	TXTLINKER_PLAYERCLASS,
	TXTLINKER_BODYLOCS,
	TXTLINKER_STOREPAGE,
	TXTLINKER_ELEMTYPES,
	TXTLINKER_HITCLASS,
	TXTLINKER_MONMODE,
	TXTLINKER_PLRMODE,
	TXTLINKER_SKILLCALC,
	TXTLINKER_MISSCALC,
	TXTLINKER_SKILLSCODE,
	TXTLINKER_EVENTS,
	TXTLINKER_COMPCODE,
	TXTLINKER_MONAI,
	TXTLINKER_ITEMS,
	TXTLINKER_PROPERTIES,
	TXTLINKER_RUNES,
	TXTLINKER_HIREDESC,
	TXTLINKER_STATES,
	TXTLINKER_SOUNDS,
	TXTLINKER_COLORS,
	TXTLINKER_TREASURECLASS,
	TXTLINKER_MONSTATS,
	TXTLINKER_MONSOUNDS,
	TXTLINKER_MONSTATS2,
	TXTLINKER_MONPLACE,
	TXTLINKER_SUPERUNIQUES,
	TXTLINKER_MISSILES,
	TXTLINKER_MONSEQ,
	TXTLINKER_SKILLDESC,
	TXTLINKER_SKILLS,
	TXTLINKER_OVERLAY,
	TXTLINKER_ITEMSTATCOST,
	TXTLINKER_PETTYPE,
	TXTLINKER_ITEMTYPES,
	TXTLINKER_SETS,
	TXTLINKER_SETITEMS,
	TXTLINKER_UNIQUEITEMS,
	TXTLINKER_MONPROP,
	TXTLINKER_MONTYPE,
	TXTLINKER_MONUMOD,
	TXTLINKER_LEVELS,
	TXTLINKER_INVALID
};

enum D2C_ItemsTxtArmorComps
{
	TXTARMORCOMP_RARM,
	TXTARMORCOMP_LARM,
	TXTARMORCOMP_TORSO,
	TXTARMORCOMP_LEGS,
	TXTARMORCOMP_RSPAD,
	TXTARMORCOMP_LSPAD,
};

enum D2Vendors
{
	VENDOR_AKARA,
	VENDOR_GHEED,
	VENDOR_CHARSI,
	VENDOR_FARA,
	VENDOR_LYSANDER,
	VENDOR_DROGNAN,
	VENDOR_HRALTI,
	VENDOR_ALKOR,
	VENDOR_ORMUS,
	VENDOR_ELZIX,
	VENDOR_ASHEARA,
	VENDOR_CAIN,
	VENDOR_HALBU,
	VENDOR_JAMELLA,
	VENDOR_MALAH,
	VENDOR_LARZUK,
	VENDOR_DREHYA,
};
#endif // CONSTANTS_DATATABLES

#ifndef CONSTANTS_EVENTS //Pseudo-Macro to group all constants
enum D2C_EventTypes
{
	EVENT_HITBYMISSILE,
	EVENT_DAMAGEDINMELEE,
	EVENT_DAMAGEDBYMISSILE,
	EVENT_ATTACKEDINMELEE,
	EVENT_DOACTIVE,
	EVENT_DOMELEEDMG,
	EVENT_DOMISSILEDMG,
	EVENT_DOMELEEATTACK,
	EVENT_DOMISSILEATTACK,
	EVENT_KILL,
	EVENT_DEATH,
	EVENT_ABSORBDAMAGE,
	EVENT_LEVELUP,
};

enum D2C_UnitEventCallbackTypes
{
	UNITEVENTCALLBACK_MODECHANGE = 0,
	UNITEVENTCALLBACK_ENDANIM = 1,
	UNITEVENTCALLBACK_AITHINK = 2,
	UNITEVENTCALLBACK_STATREGEN = 3,
	UNITEVENTCALLBACK_TRAP = 4,
	UNITEVENTCALLBACK_ACTIVESTATE = 5,
	UNITEVENTCALLBACK_RESET = 5,
	UNITEVENTCALLBACK_FREEHOVER = 6,
	UNITEVENTCALLBACK_MONUMOD = 7,
	UNITEVENTCALLBACK_QUESTFN = 7,
	UNITEVENTCALLBACK_PERIODICSKILLS = 8,
	UNITEVENTCALLBACK_PERIODICSTATS = 9,
	UNITEVENTCALLBACK_AIRESET = 10,
	UNITEVENTCALLBACK_DELAYEDPORTAL = 11,
	UNITEVENTCALLBACK_REMOVESTATE = 12,
	UNITEVENTCALLBACK_UPDATETRADE = 13,
	UNITEVENTCALLBACK_REFRESHVENDOR = 13,
	UNITEVENTCALLBACK_REMOVESKILLCOOLDOWN = 14,
	UNITEVENTCALLBACK_COUNT = 15,
	UNITEVENTCALLBACK_CUSTOM = 16,
};
#endif // CONSTANTS_EVENTS

#ifndef CONSTANTS_UI //Pseudo-Macro to group all constants
enum D2C_UIvars
{
	UI_GAME = 0x00,				//Game
	UI_INVENTORY = 0x01,		//Player Inventory
	UI_STATSCREEN = 0x02,		//Player Stat Screen
	UI_MINISKILL = 0x03,		//Skill Selection
	UI_SKILLTREE = 0x04,		//Player Skill Tree
	UI_CHATBOX = 0x05,			//Chat Box
	UI_NEWSTATS = 0x06,			//Red NewStats Button
	UI_NEWSKILLS = 0x07,		//Red NewSkills Button
	UI_NPCMENU = 0x08,			//NPC options menu
	UI_ESCMENU = 0x09,			//Esc Menu
	UI_AUTOMAP = 0x0A,			//Automap
	UI_CONFIG = 0x0B,			//Key Configuration Menu
	UI_NPCSHOP = 0x0C,			//NPC Trade
	UI_HOLDALT = 0x0D,			//Alt Items Highlight
	UI_ANVIL = 0x0E,			//Anvil
	UI_QUESTSCREEN = 0x0F,		//Quest Screen
	UI_INISCROLL = 0x10,		//Inifuss Tree Scroll
	UI_QUESTLOG = 0x11,			//Quest Log Red Button
	UI_UNKNOWN18 = 0x12,
	UI_HIRICONS = 0x13,
	UI_WAYPOINT = 0x14,			//Waypoint Screen
	UI_MINIPANEL = 0x15,		//CtrlPnl7 Mini Popop Menu
	UI_PARTYSCREEN = 0x16,		//Multiplayer Party Screen			
	UI_MPTRADE = 0x17,			//Multiplayer Trade
	UI_MSGLOG = 0x18,			//Messages Log
	UI_STASH = 0x19,			//Player Stash
	UI_CUBE = 0x1A,				//Horadric Cube
	UI_STEEGSTONE = 0x1B,		//Guild Steeg Stone
	UI_GUILDVAULT = 0x1C,		//Guild Vault
	UI_UNKNOWN29 = 0x1D,
	UI_UNKNOWN30 = 0x1E,
	UI_BELTROWS = 0x1F,			//Belt Rows Popup
	UI_UNKNOWN32 = 0x20,
	UI_HELPSCREEN = 0x21,		//Help Screen
	UI_HELPBUTTON = 0x22,		//Help Button
	UI_HIREICONS = 0x23,		//Party Icons
	UI_MERCINV = 0x24,			//Mercenary Inventory
	UI_RECIPESCROLL = 0x25		//Unused Recipe Scroll
};

enum D2C_UiStates
{
	UI_TURNON = 0,
	UI_TURNOFF = 1,
	UI_TOGGLE = 2,
};

enum D2C_GlobalUiStates
{
	UISTATE_NONE,
	UISTATE_RIGHT,
	UISTATE_LEFT,
	UISTATE_BOTH,
};

enum D2C_DrawModes
{
	DRAWMODE_TRANS25,
	DRAWMODE_TRANS50,
	DRAWMODE_TRANS75,
	DRAWMODE_MODULATE,
	DRAWMODE_BURN,
	DRAWMODE_NORMAL,
	DRAWMODE_TRANSHIGHLIGHT,
	DRAWMODE_HIGHLIGHT
};

enum D2C_AutomapCells
{
	MAPIMGCELL_REDCROSS = 221,				//Red Cross
	MAPIMGCELL_HAMMER = 302,				//Hammer
	MAPIMGCELL_CAINCAGE = 303,				//Cain Tristram Cage
	MAPIMGCELL_MEPHORB = 305,				//Travincal Compelling Orb
	MAPIMGCELL_DIABSEAL = 306,				//Chaos Sanctuary Seals
	MAPIMGCELL_WAYPOINT = 307,				//Waypoint
	MAPIMGCELL_WELL = 309,					//Well
	MAPIMGCELL_SHRINE = 310,				//Shrine
	MAPIMGCELL_FALLCAMPFLAG = 312,			//Fallen Camps Skull Flag
	MAPIMGCELL_INITREE = 313,				//Tree of Inifuss
	MAPIMGCELL_CAINROCK = 314,				//Cairn Stone
	MAPIMGCELL_GIDBINN = 315,				//Gidbinn
	MAPIMGCELL_QHAMMER = 316,				//Horadric Hammer
	MAPIMGCELL_BLUECROSS = 317,				//Blue Cross
	MAPIMGCELL_QCHEST = 318,				//Quest Sparky Chest
	MAPIMGCELL_STASH = 319,					//Your Stash
	MAPIMGCELL_ARCANEPORTAL = 339,			//Arcane Blue Portal
	MAPIMGCELL_ROGUEFIRE = 405,				//Rogue Camp Fire
	MAPIMGCELL_BOOK = 427,					//Book (stony field and Horazon?)
	MAPIMGCELL_PLACEHOLDER = 1176,			//Unknown Placeholder Reveal Code
	MAPIMGCELL_BARRITOWER = 1258			//Barricaded Towers Act 5
};

enum D2C_Fonts
{
	D2FONT_FONT8,					//Font8
	D2FONT_FONT16,					//Font16
	D2FONT_FONT30,					//Font30
	D2FONT_FONT42,					//Font42
	D2FONT_FONTFORMAL10,			//FontFormal10
	D2FONT_FONTFORMAL12,			//FontFormal12
	D2FONT_FONT6,					//Font6
	D2FONT_FONT24,					//Font24
	D2FONT_FONTFORMAL11,			//FontFormal11
	D2FONT_FONTEXOCET10,			//FontExocet10
	D2FONT_FONTRIDICULOUS,			//FontRidiculous
	D2FONT_FONTEXOCET8,				//FontExocet8
	D2FONT_REALLYTHELASTSUCKER,		//ReallyTheLastSucker
	D2FONT_FONTINGAMECHAT			//FontInGameChat
};

enum D2C_StringColorCodes
{
	STRCOLOR_WHITE,
	STRCOLOR_RED,
	STRCOLOR_LIGHTGREEN,
	STRCOLOR_BLUE,
	STRCOLOR_DARK_GOLD,
	STRCOLOR_GREY,
	STRCOLOR_BLACK,
	STRCOLOR_TAN,
	STRCOLOR_ORANGE,
	STRCOLOR_YELLOW,
	STRCOLOR_DARKGREEN,
	STRCOLOR_PURPLE,
	STRCOLOR_DARKGREEN2
};

enum D2C_UiButtonModes
{
	BTNMODE_ENABLED,
	BTNMODE_PRESSED,
	BTNMODE_DISABLED,
};

enum D2C_ButtonActions
{
	TRADEBTN_CANCEL = 2, 
	TRADEBTN_PERFORM = 3, 
	TRADEBTN_ACCEPT = 4, 
	TRADEBTN_GREENCHECK = 7, 
	TRADEBTN_SENDGOLD = 8, 
	TRADEBTN_CLOSESTASH = 18, 
	TRADEBTN_STASHWITHDRAW = 19, 
	TRADEBTN_STASHDEPOSIT = 20, 
	TRADEBTN_CLOSECUBE = 23, 
	TRADEBTN_TRANSMUTE = 24
};

enum D2C_D2WinMenuEntryTypes
{
	MENUENTRY_EDITBOX = 0x01,
	MENUENTRY_IMAGE = 0x02,
	MENUENTRY_ANIMATION = 0x03,
	MENUENTRY_TEXT = 0x04,
	MENUENTRY_SCROLLBAR = 0x05,
	MENUENTRY_BUTTON = 0x06,
	MENUENTRY_LIST = 0x07,
	MENUENTRY_TIMER = 0x08,
	MENUENTRY_SMACKER = 0x09,
	MENUENTRY_PROGRESSBAR = 0x0A,
	MENUENTRY_POPUP = 0x0B,
	MENUENTRY_ACCOUNTLIST = 0x0C,
};

enum D2C_MenuImageLoadType
{
	MENUIMGTYPE_DC6,
	MENUIMGTYPE_DCC,
};

enum D2C_VideoRenderModes
{
	VIDEOMODE_NONE,
	VIDEOMODE_GDI,
	VIDEOMODE_RAVE,
	VIDEOMODE_DDRAW,
	VIDEOMODE_GLIDE,
	VIDEOMODE_OPENGL,
	VIDEOMODE_D3D,
};

enum D2C_NpcMenuIdx
{
	NPCMENUIDX_AKARA,
	NPCMENUIDX_ATMA,
	NPCMENUIDX_CAIN1,
	NPCMENUIDX_CHARSI,
	NPCMENUIDX_DROGNAN,
	NPCMENUIDX_ELZIX,
	NPCMENUIDX_GEGLASH,
	NPCMENUIDX_GHEED,
	NPCMENUIDX_GREIZ,
	NPCMENUIDX_JERHYN,
	NPCMENUIDX_LYSANDER,
	NPCMENUIDX_KASHYA,
	NPCMENUIDX_FARA,
	NPCMENUIDX_WARRIV1,
	NPCMENUIDX_WARRIV2,
	NPCMENUIDX_MESHIF1,
	NPCMENUIDX_CAIN2,
	NPCMENUIDX_CAIN5,
	NPCMENUIDX_CAIN3,
	NPCMENUIDX_CAIN4,
	NPCMENUIDX_TYRAEL1,
	NPCMENUIDX_TYRAEL2,
	NPCMENUIDX_HALBU,
	NPCMENUIDX_JAMELLA,
	NPCMENUIDX_ASHEARA,
	NPCMENUIDX_HRATLI,
	NPCMENUIDX_ALKOR,
	NPCMENUIDX_ORMUS,
	NPCMENUIDX_IZUALGHOST,
	NPCMENUIDX_HALBU2,
	NPCMENUIDX_MESHIF2,
	NPCMENUIDX_NATALYA,
	NPCMENUIDX_FLAVIE,
	NPCMENUIDX_KAELAN,
	NPCMENUIDX_HADRIEL,
	NPCMENUIDX_GUARD1,
	NPCMENUIDX_GUARD2,
	NPCMENUIDX_TYRAEL3,
	NPCMENUIDX_CAIN6,
	NPCMENUIDX_LARZUK,
	NPCMENUIDX_MALAH,
	NPCMENUIDX_ANYA,
	NPCMENUIDX_NIHLATHAK,
	NPCMENUIDX_QUALKEHK,
	NPCMENUIDX_FROZENANYA,
	NPCMENUIDX_ANCIENTSTATUE1,
	NPCMENUIDX_ANCIENTSTATUE2,
	NPCMENUIDX_ANCIENTSTATUE3,
};

enum D2C_VendorInventoryModes
{
	VENDORMODE_NONE = 0,
	VENDORMODE_TRADE = 1,
	VENDORMODE_BUY = 2,
	VENDORMODE_SELL = 3,
	VENDORMODE_REPAIR = 4,
	VENDORMODE_VERIFY = 5,
	VENDORMODE_HEAL = 6,
	VENDORMODE_DISPLAYING_RESULTS = 7,
	VENDORMODE_LASTVENDOR = 8,
	VENDORMODE_UNKNOWN = 9,
	VENDORMODE_PLRTRADE_OLD = 10,
	VENDORMODE_PLRTRADE = 11,
	VENDORMODE_STASH = 12,
	VENDORMODE_DEPOSIT = 13,
	VENDORMODE_CUBE = 14,
	VENDORMODE_IMBUE = 19,
};
#endif // CONSTANTS_UI

#ifndef CONSTANTS_STRINGS //Pseudo-Macro to group all constants
enum D2C_LangId
{
	D2LANG_ENG = 0x00,
	D2LANG_ESP = 0x01,
	D2LANG_GER = 0x02,
	D2LANG_FRA = 0x03,
	D2LANG_POR = 0x04,
	D2LANG_ITA = 0x05,
	D2LANG_JPN = 0x06,
	D2LANG_KOR = 0x07,
	D2LANG_POL = 0x0A,
};

enum D2C_StringTablesHcidx
{
	STRTABLE_STRING,
	STRTABLE_PATCHSTRING,
	STRTABLE_EXPSTRING,
};
#endif // CONSTANTS_STRINGS

#ifndef CONSTANTS_ARENA //Pseudo-Macro to group all constants
enum D2C_PvpFlags
{
	PVPFLAG_INVITEYOU = 0x01,		// Player Invites you
	PVPFLAG_YOUINVITE = 0x02,		// You invited this player
	PVPFLAG_HOSTILEYOU = 0x04,		// This player has declared hostility towards you
	PVPFLAG_YOUHOSTILE = 0x08,		// You declared hostility towards this player
	PVPFLAG_ISALLIED = 0x10,		// Player is allied but not with you
	PVPFLAG_ALLIEDWITHYOU = 0x20	// You are allied with this player
};

enum D2C_ArenaFlags
{
	ARENAFLAG_ARENAMODE = 0x00000002,
	ARENAFLAG_UPDATECLIENTS = 0x00000004,
	ARENAFLAG_TEMPLATE = 0x00000020,
	ARENAFLAG_UPDATE = 0x00000400,
	ARENAFLAG_HARDCORE = 0x00000800,
	ARENAFLAG_ACTIVE = 0x00010000,
	ARENAFLAG_ALLOWPARTY = 0x00100000
};

enum D2C_ArenaScoreTypes
{
	ARENASCORE_SUICIDE,
	ARENASCORE_PLAYERKILL,
	ARENASCORE_PLAYERKILLPERCENT,
	ARENASCORE_MONSTERKILL,
	ARENASCORE_PLAYERDEATH,
	ARENASCORE_PLAYERDEATHPERCENT,
	ARENASCORE_MONSTERDEATH,
};

enum D2C_ArenaMatchTypes
{
	D2ARENAMATCH_DEATHMATCH,
	D2ARENAMATCH_TEAMDEATHMATCH,
	D2ARENAMATCH_CAPTURETHEFLAG,
	D2ARENAMATCH_KINGOFTHEHILL,
};

enum D2Killtypes
{
	KILLTYPE_SUICIDE = 0, 
	KILLTYPE_PVP_KILL, 
	KILLTYPE_PVP2, 
	KILLTYPE_PVM_KILL, 
	KILLTYPE_NVM, 
	KILLTYPE_MVP_KILL, 
	KILLTYPE, 
};
#endif // CONSTANTS_ARENA

#ifndef CONSTANTS_PACKETS //Pseudo-Macro to group all constants
enum D2C_SRV2CLT5A_TYPES
{
	EVENTTYPE_DROPTIMEOUT,
	EVENTTYPE_DROPERROR,
	EVENTTYPE_PLAYERJOIN,
	EVENTTYPE_PLAYERLEFT,
	EVENTTYPE_NOTINGAME,
	EVENTTYPE_NOTLOGGEDIN,
	EVENTTYPE_SLAIN,
	EVENTTYPE_PVPSTATUS,
	EVENTTYPE_PLAYERISBUSY,
	EVENTTYPE_PLEASEWAIT,
	EVENTTYPE_HASITEMSINBOX,
	EVENTTYPE_UNUSED1,
	EVENTTYPE_UNUSED2,
	EVENTTYPE_NOTLISTENINGTOYOU,
	EVENTTYPE_UNUSED3,
	EVENTTYPE_REALMGOINGDOWN,
	EVENTTYPE_PLEASEWAITHOSTILE,
	EVENTTYPE_JORDANSTONES,
	EVENTTYPE_DIABLOCLONE,
//Custom Types
	EVENTTYPE_GOLDPICKED,
	EVENTTYPE_UPDATESKILLDELAY,
	EVENTTYPE_UPDATESKILLDELAYGROUP,
};

enum D2C_SRV2CLT77_PARAMS
{
	UPDATEUI_ASKTOTRADE = 0,
	UPDATEUI_ASKEDTOTRADE = 1,
	UPDATEUI_ACCEPTTRADE = 5,
	UPDATEUI_OPENTRADE = 6,
	UPDATEUI_SELLERNOROOM = 9,
	UPDATEUI_BUYERNOROOM = 10,
	UPDATEUI_CLOSETRADE = 12,
	UPDATEUI_TRADEDONE = 13,
	UPDATEUI_CHECKBOX = 14,
	UPDATEUI_NORMCHECKBOX = 15,
	UPDATEUI_OPENSTASH = 16,
	UPDATEUI_OPENCUBE = 21
};

enum D2C_SRV2CLT9C_9D_PARAMS
{
	ITEMACTION_ADDTOGROUND = 0,
	ITEMACTION_GROUNDTOCURSOR,
	ITEMACTION_DROPTOGROUND,
	ITEMACTION_ONGROUND,
	ITEMACTION_PUTINCONTAINER,
	ITEMACTION_REMOVEFROMCONTAINER,
	ITEMACTION_EQUIP,
	ITEMACTION_INDIRECTLYSWAPBODYITEM,
	ITEMACTION_UNEQUIP,
	ITEMACTION_SWAPBODYITEM,
	ITEMACTION_ADDQUANTITY,
	ITEMACTION_ADDTOSHOP,
	ITEMACTION_REMOVEFROMSHOP,
	ITEMACTION_SWAPINCONTAINER,
	ITEMACTION_PUTINBELT,
	ITEMACTION_REMOVEFROMBELT,
	ITEMACTION_SWAPINBELT,
	ITEMACTION_AUTOUNEQUIP,
	ITEMACTION_TOCURSOR,
	ITEMACTION_ITEMINSOCKET,
	ITEMACTION_UNKNOWN0x14,
	ITEMACTION_UPDATESTATS,
	ITEMACTION_UNKNOWN0x16,
	ITEMACTION_WEAPONSWITCH
};

enum D2C_ChatMessageTypes
{
	CHAT_NONE,
	CHAT_PLAYERMESSAGE,
	CHAT_RECEIVEDWHISPER,
	CHAT_SERVERMESSAGE,
	CHAT_NONAME,
	CHAT_EMOTE,
	CHAT_SENTWHISPER,
	CHAT_CLUESCROLL,
};
#endif // CONSTANTS_PACKETS

#ifndef CONSTANTS_QUESTS //Pseudo-Macro to group all constants
enum D2C_OriginalQuestFlags
{
	QFLAG_REWARDGRANTED,
	QFLAG_REWARDPENDING,
	QFLAG_STARTED,
	QFLAG_LEAVETOWN,
	QFLAG_ENTERAREA,
	QFLAG_CUSTOM1,
	QFLAG_CUSTOM2,
	QFLAG_CUSTOM3,
	QFLAG_CUSTOM4,
	QFLAG_CUSTOM5,
	QFLAG_CUSTOM6,
	QFLAG_CUSTOM7,
	QFLAG_UPDATEQUESTLOG,
	QFLAG_PRIMARYGOALDONE,
	QFLAG_COMPLETEDNOW,
	QFLAG_COMPLETEDBEFORE,
};

//enum D2C_QuestStates
//{
//	QSTATE_QUESTCOMPLETED,
//	QSTATE_QUESTDONE,
//	QSTATE_QUESTNOTSTARTED,
//	QSTATE_QUESTSTARTEDNOTCOMPLETED,
//};


//enum D2QuestFilterEvents
//{
//	QUESTEVENT_STATUSUPDATE = 0,
//	QUESTEVENT_NPCINIT = 1,
//	QUESTEVENT_QUESTINIT = 2
//};

enum D2ScrollMenus
{
	SCROLLMENU_MESSAGE = 0,
	SCROLLMENU_MENU = 1,
	SCROLLMENU_NONE = 2
};

enum D2QuestEvents
{
	QUESTEVENT_NPCACTIVATE = 0,
	QUESTEVENT_NPCDEACTIVATE = 2,
	QUESTEVENT_CHANGEDLEVEL = 3,
	QUESTEVENT_ITEMPICKEDUP = 4,
	QUESTEVENT_ITEMDROPPED = 5,
	QUESTEVENT_MONSTERKILLED = 8,
	QUESTEVENT_PLAYERDROPPEDWITHQUESTITEM = 9,
	QUESTEVENT_PLAYERLEAVESGAME = 10,
	QUESTEVENT_SCROLLMESSAGE = 11,
	QUESTEVENT_PLAYERSTARTEDGAME = 13,
	QUESTEVENT_PLAYERJOINEDGAME = 14
};

enum D2QuestAlert
{
	QALERT_DEFAULT = 0x00,
	QALERT_MESSAGE = 0x01,
	QALERT_SOUND = 0x02,
	QALERT_SOUNDEX = 0x10,
	QALERT_BLOCKED = 0x20
};
#endif // CONSTANTS_QUESTS
